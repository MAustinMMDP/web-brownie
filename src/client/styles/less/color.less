// ---------- COLOR SCHEME MAGIC

// BASE COLOR
//== base color variables *** this is where the magic happens :)
@hue: 180; // enter optional hue variable or custom hue range 0-330
@saturation: 80; // saturation range 0-100 st
@lightness: 50; // lightness range 0-100 (0 = black, 100 = white)
@alpha: 1;

//== base color function
@color-base: hsla(@hue, (@saturation/100), (@lightness/100), @alpha);
//== base color mixins
.color-base(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
  color: @color-base;
}

.background-base(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
  background: @color-base;
}

.fill-base(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
  fill: @color-base;
}

// COMPLEMENTARY COLOR
//== complementary color function
@cc: spin(@color-base, 180);
//== complementary color mixins
.color-complementary(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
  color: @cc;
}

.background-complementary(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
  background: @cc;
}

.fill-complementary(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
  fill: @cc;
}

// ANALOGOUS COLOR
//== analogous color functions
@ac-one: spin(@color-base, -30);
@ac-two: spin(@color-base, 30);
//== analogous color mixins
.color-analogous-one(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
  color: @ac-one;
}

.color-analogous-two(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
  color: @ac-two;
}

.background-analogous-one(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
  background: @ac-one;
}

.background-analogous-two(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
  background: @ac-two;
}

.fill-analogous-one(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
  fill: @ac-one;
}

.fill-analogous-two(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
  fill: @ac-two;
}

// SPLIT COMPLEMENTARY
//== split complementary color functions
@scc-one: spin(@color-base, (180-30));
@scc-two: spin(@color-base, (180+30));
//== split complementary mixins
.color-split-complementary-one(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
  color: @scc-one;
}

.color-split-complementary-two(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
  color: @scc-two;
}

.background-split-complementary-one(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
  background: @scc-one;
}

.background-split-complementary-two(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
  background: @scc-two;
}

.fill-split-complementary-one(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
  fill: @scc-one;
}

.fill-split-complementary-two(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
  fill: @scc-two;
}

// TRIADIC COLOR
//== triadic color functions
@tc-one: spin(@color-base, -120);
@tc-two: spin(@color-base, 120);
//== triadic color mixins
.color-triadic-one(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
  color: @tc-one;
}

.color-triadic-two(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
  color: @tc-two;
}

.background-triadic-one(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
  background: @tc-one;
}

.background-triadic-two(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
  background: @tc-two;
}

.fill-triadic-one(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
  fill: @tc-one;
}

.fill-triadic-two(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
  fill: @tc-two;
}

// BORDER
//== border variables
@bds: solid;
@bdw: 1;
@bdc: @color-base;
@bdtc: @bdc;
@bdrc: @bdc;
@bdbc: @bdc;
@bdlc: @bdc;
//== border mixins
// border-width is always included
.border (@mixin, @border-width: @bdw, @border-style: @bds, @border-top-color: @bdtc, @border-right-color: @bdrc, @border-bottom-color: @bdbc, @border-left-color: @bdlc, @border-color: @bdc) {
  border-width: unit((@border-width / @fz), em);
}

// mixed border color, e.g., .border(mix, 2, dotted, red, green, red, green); result = border-width: 0.125em; border-style: dotted; border-color: red green red green;
.border (@mixin, @border-width: @bdw, @border-style: @bds, @border-top-color: @bdtc, @border-right-color: @bdrc, @border-bottom-color: @bdbc, @border-left-color: @bdlc, @border-color: @bdc) when (@mixin =mix) {
  border-style: @border-style;
  border-color: @border-top-color @border-right-color @border-bottom-color @border-left-color;
}

// add border on all sides, e.g., .border(all, 2, dotted, red); result = border-width: 0.125em; border-style: dotted; border-color: red;
.border (@mixin, @border-width: @bdw, @border-style: @bds, @border-color: @bdc, @border-top-color: @bdtc, @border-right-color: @bdrc, @border-bottom-color: @bdbc, @border-left-color: @bdlc) when (@mixin =all) {
  border-style: @border-style;
  border-color: @border-color;
}

// add top border, e.g., .border(@mixin: top, @border-color: red); result = border-width: 0.0625em; border-top-style: solid; border-top-color: red;
.border (@mixin, @border-width: @bdw, @border-style: @bds, @border-top-color: @bdtc, @border-right-color: @bdrc, @border-bottom-color: @bdbc, @border-left-color: @bdlc, @border-color: @bdc) when (@mixin =top) {
  border-top-style: @border-style;
  border-top-color: @border-color;
}

// add right border, e.g., .border(@mixin: right, @border-color: red); result = border-width: 0.0625em; border-right-style: solid; border-right-color: red;
.border (@mixin, @border-width: @bdw, @border-style: @bds, @border-right-color: @bdrc, @border-top-color: @bdtc, @border-bottom-color: @bdbc, @border-left-color: @bdlc, @border-color: @bdc) when (@mixin =right) {
  border-right-style: @border-style;
  border-right-color: @border-color;
}

// add bottom border, e.g., .border(@mixin: bottom, @border-color: red); result = border-width: 0.0625em; border-bottom-style: solid; border-bottom-color: red;
.border (@mixin, @border-width: @bdw, @border-style: @bds, @border-bottom-color: @bdbc, @border-top-color: @bdtc, @border-right-color: @bdrc, @border-left-color: @bdlc, @border-color: @bdc) when (@mixin =bottom) {
  border-bottom-style: @border-style;
  border-bottom-color: @border-color;
}

// add left border, e.g., .border(@mixin: left, @border-width:2, @border-color:green); result = border-width: 0.125em; border-left-style: solid; border-left-color: green;
.border (@mixin, @border-width: @bdw, @border-style: @bds, @border-left-color: @bdlc, @border-top-color: @bdtc, @border-right-color: @bdrc, @border-bottom-color: @bdbc, @border-color: @bdc) when (@mixin =left) {
  border-left-style: @border-style;
  border-left-color: @border-color;
}
