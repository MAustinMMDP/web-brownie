// ---------- COLOR SCHEME MAGIC

// BASE COLOR
//== base color variables *** this is where the magic happens :)
// enter optional hue variable or custom hue range 0-360
@hue: 180;
// saturation range 0-100 st
@saturation: 80;
// lightness range 0-100 (0 = black, 100 = white)
@lightness: 50;
@alpha: 1;

//== base color function
@color-base: hsla(@hue, (@saturation/100), (@lightness/100), @alpha);
//== base color mixins
.color-base(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
    color: @color-base;
}

.background-base(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
    background: @color-base;
}

.fill-base(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
    fill: @color-base;
}

// COMPLEMENTARY COLOR
//== complementary color function
@cc: spin(@color-base, 180);
//== complementary color mixins
.color-complementary(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
    color: @cc;
}

.background-complementary(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
    background: @cc;
}

.fill-complementary(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
    fill: @cc;
}

// ANALOGOUS COLOR
//== analogous color functions
@ac-one: spin(@color-base, -30);
@ac-two: spin(@color-base, 30);
//== analogous color mixins
.color-analogous-one(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
    color: @ac-one;
}

.color-analogous-two(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
    color: @ac-two;
}

.background-analogous-one(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
    background: @ac-one;
}

.background-analogous-two(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
    background: @ac-two;
}

.fill-analogous-one(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
    fill: @ac-one;
}

.fill-analogous-two(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
    fill: @ac-two;
}

// SPLIT COMPLEMENTARY
//== split complementary color functions
@scc-one: spin(@color-base, (180-30));
@scc-two: spin(@color-base, (180+30));
//== split complementary mixins
.color-split-complementary-one(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
    color: @scc-one;
}

.color-split-complementary-two(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
    color: @scc-two;
}

.background-split-complementary-one(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
    background: @scc-one;
}

.background-split-complementary-two(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
    background: @scc-two;
}

.fill-split-complementary-one(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
    fill: @scc-one;
}

.fill-split-complementary-two(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
    fill: @scc-two;
}

// TRIADIC COLOR
//== triadic color functions
@tc-one: spin(@color-base, -120);
@tc-two: spin(@color-base, 120);
//== triadic color mixins
.color-triadic-one(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
    color: @tc-one;
}

.color-triadic-two(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
    color: @tc-two;
}

.background-triadic-one(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
    background: @tc-one;
}

.background-triadic-two(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
    background: @tc-two;
}

.fill-triadic-one(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
    fill: @tc-one;
}

.fill-triadic-two(@hue: @hue, @saturation: @saturation, @lightness: @lightness, @alpha: @alpha) {
    fill: @tc-two;
}
