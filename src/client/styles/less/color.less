// ---------- COLOR

//== base color mixins
.c-base(@hue: @hue; @sat: @saturation; @lgt: @lightness; @op: @opacity) {
    color: hsla(@hue, (@sat/100), (@lgt/100), @op);
}
.b-base(@hue: @hue; @sat: @saturation; @lgt: @lightness; @op: @opacity) {
    background: hsla(@hue, (@sat/100), (@lgt/100), @op);
}
.f-base(@hue: @hue; @sat: @saturation; @lgt: @lightness; @op: @opacity) {
    fill: hsla(@hue, (@sat/100), (@lgt/100), @op);
}

//== complementary color mixins
.c-complementary(@hue: @hue; @sat: @saturation; @lgt: @lightness; @op: @opacity) {
    color: spin(hsla(@hue, (@sat/100), (@lgt/100), @op), 180);
}

.b-complementary(@hue: @hue; @sat: @saturation; @lgt: @lightness; @op: @opacity) {
    background: spin(hsla(@hue, (@sat/100), (@lgt/100), @op), 180);
}
.f-complementary(@hue: @hue; @sat: @saturation; @lgt: @lightness; @op: @opacity) {
    fill: spin(hsla(@hue, (@sat/100), (@lgt/100), @op), 180);
}

//== analogous color mixins
.c-analogous-one(@hue: @hue; @sat: @saturation; @lgt: @lightness; @op: @opacity) {
    color: spin(hsla(@hue, (@sat/100), (@lgt/100), @op), -30);
}
.b-analogous-one(@hue: @hue; @sat: @saturation; @lgt: @lightness; @op: @opacity) {
    background: spin(hsla(@hue, (@sat/100), (@lgt/100), @op), -30);
}
.f-analogous-one(@hue: @hue; @sat: @saturation; @lgt: @lightness; @op: @opacity) {
    fill: spin(hsla(@hue, (@sat/100), (@lgt/100), @op), -30);
}
.c-analogous-two(@hue: @hue; @sat: @saturation; @lgt: @lightness; @op: @opacity) {
    color: spin(hsla(@hue, (@sat/100), (@lgt/100), @op), 30);
}
.b-analogous-two(@hue: @hue; @sat: @saturation; @lgt: @lightness; @op: @opacity) {
    background: spin(hsla(@hue, (@sat/100), (@lgt/100), @op), 30);
}
.f-analogous-two(@hue: @hue; @sat: @saturation; @lgt: @lightness; @op: @opacity) {
    fill: spin(hsla(@hue, (@sat/100), (@lgt/100), @op), 30);
}

//== split complementary mixins
.c-split-complementary-one(@hue: @hue; @sat: @saturation; @lgt: @lightness; @op: @opacity) {
    color: spin(hsla(@hue, (@sat/100), (@lgt/100), @op), (180-30));
}
.b-split-complementary-one(@hue: @hue; @sat: @saturation; @lgt: @lightness; @op: @opacity) {
    background: spin(hsla(@hue, (@sat/100), (@lgt/100), @op), (180-30));
}
.f-split-complementary-one(@hue: @hue; @sat: @saturation; @lgt: @lightness; @op: @opacity) {
    fill: spin(hsla(@hue, (@sat/100), (@lgt/100), @op), (180-30));
}
.c-split-complementary-two(@hue: @hue; @sat: @saturation; @lgt: @lightness; @op: @opacity) {
    color: spin(hsla(@hue, (@sat/100), (@lgt/100), @op), (180+30));
}
.b-split-complementary-two(@hue: @hue; @sat: @saturation; @lgt: @lightness; @op: @opacity) {
    background: spin(hsla(@hue, (@sat/100), (@lgt/100), @op), (180+30));
}
.f-split-complementary-two(@hue: @hue; @sat: @saturation; @lgt: @lightness; @op: @opacity) {
    fill: spin(hsla(@hue, (@sat/100), (@lgt/100), @op), (180+30));
}

//== triadic color mixins
.c-triadic-one(@hue: @hue; @sat: @saturation; @lgt: @lightness; @op: @opacity) {
    color: spin(hsla(@hue, (@sat/100), (@lgt/100), @op), -120);
}
.b-triadic-one(@hue: @hue; @sat: @saturation; @lgt: @lightness; @op: @opacity) {
    background: spin(hsla(@hue, (@sat/100), (@lgt/100), @op), -120);
}
.f-triadic-one(@hue: @hue; @sat: @saturation; @lgt: @lightness; @op: @opacity) {
    fill: spin(hsla(@hue, (@sat/100), (@lgt/100), @op), -120);
}
.c-triadic-two(@hue: @hue; @sat: @saturation; @lgt: @lightness; @op: @opacity) {
    color: spin(hsla(@hue, (@sat/100), (@lgt/100), @op), 120);
}
.b-triadic-two(@hue: @hue; @sat: @saturation; @lgt: @lightness; @op: @opacity) {
    background: spin(hsla(@hue, (@sat/100), (@lgt/100), @op), 120);
}
.f-triadic-two(@hue: @hue; @sat: @saturation; @lgt: @lightness; @op: @opacity) {
    fill: spin(hsla(@hue, (@sat/100), (@lgt/100), @op), 120);
}

//== border mixins
// add border on all sides, e.g., .b(all; 2; dotted; red); result = border: 0.125em dotted red;
.b (@mixin; @bdw: @border-width; @bds: @border-style; @bdc: @border-color; @bdts: @border-style; @bdrs: @border-style; @bdbs: @border-style; @bdls: @border-style; @bdtc: @border-color; @bdrc: @border-color; @bdbc: @border-color; @bdlc: @border-color) when (@mixin =all) {
    border: unit((@bdw / @font-size), em) @bds @bdc;
}

// add top border, e.g., .b(top; @bdtc: red); result = border-top: 0.0625em solid red;
.b (@mixin; @bdw: @border-width; @bds: @border-style; @bdc: @border-color; @bdts: @border-style; @bdrs: @border-style; @bdbs: @border-style; @bdls: @border-style; @bdtc: @border-color; @bdrc: @border-color; @bdbc: @border-color; @bdlc: @border-color) when (@mixin =top) {
    border-top: unit((@bdw / @font-size), em) @bdts @bdtc;
}

// add right border, e.g., .b(right; @bdrc: red); result = border-right: 0.0625em solid red;
.b (@mixin; @bdw: @border-width; @bds: @border-style; @bdc: @border-color; @bdts: @border-style; @bdrs: @border-style; @bdbs: @border-style; @bdls: @border-style; @bdtc: @border-color; @bdrc: @border-color; @bdbc: @border-color; @bdlc: @border-color) when (@mixin =right) {
    border-right: unit((@bdw / @font-size), em) @bdrs @bdrc;
}

// add bottom border, e.g., .b(bottom; @bdbc: red); result = border-bottom: 0.0625em solid red;
.b (@mixin; @bdw: @border-width; @bds: @border-style; @bdc: @border-color; @bdts: @border-style; @bdrs: @border-style; @bdbs: @border-style; @bdls: @border-style; @bdtc: @border-color; @bdrc: @border-color; @bdbc: @border-color; @bdlc: @border-color) when (@mixin =bottom) {
    border-bottom: unit((@bdw / @font-size), em) @bdbs @bdbc;
}

// add left border, e.g., .b(left; @bdw:2; @bdlc:green); result = border-left: 0.125em solid green;
.b (@mixin; @bdw: @border-width; @bds: @border-style; @bdc: @border-color; @bdts: @border-style; @bdrs: @border-style; @bdbs: @border-style; @bdls: @border-style; @bdtc: @border-color; @bdrc: @border-color; @bdbc: @border-color; @bdlc: @border-color) when (@mixin =left) {
    border-left: unit((@bdw / @font-size), em) @bdls @bdlc;
}
