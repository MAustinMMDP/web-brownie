@import "variables";

// ---------- GRID

//== clearfix mixin
.clearfix() {
  &:before, &:after {
    content: "";
    display: table;
    clear: both;
  }
}

//== box-sizing mixin
.bxz (@bxz: @box-sizing) {
    -webkit-box-sizing: @bxz;
    -moz-box-sizing: @bxz;
    box-sizing: @bxz;
    *, *:before, *:after {
        box-sizing: inherit;
    }
}

//== grid mixins
// included in all grid mixins
.grid (@mixin; @miw: @min-width; @maw: @max-width) {
  margin: 0 auto;
  width: 100%;
  .clearfix;
}

// full width grid mixin, e.g., .grid(full); result = margin: 0 auto; width: 100%;
.grid (@mixin; @miw: @min-width; @maw: @max-width) when (@mixin = full) {}

// min width grid mixin (mobile first approach), e.g., .grid(miw; @miw: 320); result = margin: 0 auto; width: 100%; min-width: 20em;
.grid (@mixin; @miw: @min-width; @maw: @max-width) when (@mixin = miw) {
    min-width: unit((@miw / @font-size), em);
}

// max width grid mixin, e.g., .grid(maw; @maw: 960); result = margin: 0 auto; width: 100%; max-width: 60em;
.grid (@mixin; @maw: @max-width; @miw: @min-width) when (@mixin = maw) {
  max-width: unit((@maw / @font-size), em);
}

//== column mixin
// column, e.g., .col(6); result = float: left; text-align: left; width: 50%;
.col(@span; @fl: @float; @ta: @text-align) {
    float: @fl;
    text-align: @ta;
    width: ((100% / 12 * @span)*1.0);
}
